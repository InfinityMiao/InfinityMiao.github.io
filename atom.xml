<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>InfinityMiao Blog</title>
  <icon>https://www.gravatar.com/avatar/68b6df795217cf32fe21ce3ab2755e49</icon>
  <subtitle>sometimes code， sometimes design</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://infinitymiao.cn/"/>
  <updated>2019-10-23T02:07:11.671Z</updated>
  <id>http://infinitymiao.cn/</id>
  
  <author>
    <name>InfinityMiao</name>
    <email>524937890@yeah.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://infinitymiao.cn/2019/10/22/learned%20index%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://infinitymiao.cn/2019/10/22/learned index学习笔记/</id>
    <published>2019-10-22T02:02:21.678Z</published>
    <updated>2019-10-23T02:07:11.671Z</updated>
    
    <content type="html"><![CDATA[<p>论文链接：<a href="https://www.researchgate.net/publication/321512926_The_Case_for_Learned_Index_Structures" target="_blank" rel="noopener">https://www.researchgate.net/publication/321512926_The_Case_for_Learned_Index_Structures</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据库的索引和机器学习里的预测模型其实有一些相似之处，比如 B 树是把 key 映射到一个有序数组中的某个位置，Hash 索引是把 key 映射到一个无序数组中的某个位置，bitmap 是把 key 映射成是一个布尔值（存在与否）。</p><p>所以这就是本文要讨论的地方了，以上的想法是可以实现的。实验表明，在某些数据集上（有规律可循的数据集），用 RM-Index 预测模型代替 B 树之类的数据结构，可以提升 70% 的速度、并节约相当可观的空间。</p><h2 id="范围索引"><a href="#范围索引" class="headerlink" title="范围索引"></a>范围索引</h2><p>B树和RM-Index有一点很相似，都能够根据输入的数据而确定一个区间，这个区间就包含了最终想要得到的数据。</p><ul><li>B树确定了在区间[pos, pos + pagesize]内</li><li>RM-Index在预测错误率在 min/max_err 以内时确定了 在[pos - min_err, pos + max_err]内</li></ul><p>一图以概之：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://5b0988e595225.cdn.sohucs.com/images/20181105/fe340b92b4954c4880e993211bc35dfd.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>于是问题变成，如何把预测错误率 bound 在 max_err 以内？那就是训练，在训练集上的error可以降到极低的地步，而所有的数据就是我们的训练集，因此可以不用考虑过拟合的问题，甚至可以将过拟合作为最终的训练目标。而鉴于训练NN（Neural network）的复杂性，RM-Index多用于只读数据库的索引，或者更新较慢的数据库中（例如一天更新一次）。与此同时，NN可以在专用的芯片上获得惊人的速度，例如GPU或者TPU。时间复杂度要比B树的O(logn)快很多。</p><h2 id="递归模型索引-RM-Index"><a href="#递归模型索引-RM-Index" class="headerlink" title="递归模型索引 RM-Index"></a>递归模型索引 RM-Index</h2><p>以上已经说完了核心思想，接下来就是要找到一个合适的预测模型来代替 B 树。实验发现，直接上 DNN 效果并不好：单次计算代价太大，只能用 GPU（而调用 GPU 会产生不小的 overhead）；而且网络很庞大，retrain（增删改）代价很大。为解决这个问题，决策树给我们做了个很好的提示，如果一个模型解决不了问题，就再加几层。</p><p>举个例子：为 100M 记录训练一个足够精确的预测器太难，那就分成 3 层树状结构。根节点分类器把记录分出 100 份，每份大约有 1M 记录；第二层再分出 100 份，每份大约只剩 10K 记录；第三层再分出 100 份，每份大约有 100 条记录——假设 100 条纪录足够把误差在 min/max_err 之内。</p><p>RM-Index结构示意：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://5b0988e595225.cdn.sohucs.com/images/20181105/acca0ca189f643ffaea60a8f2f66b99b.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>这样做的好处是，每层要做的事情简单多了（每层 precision gain = 100），模型可以变得简单得多。每个 NN 模型就像一个精通自己领域的专家，他只要学习某个很小子集的 keys 就可以了。这也同时解决了 last mile 难题，大不了为这一百左右个 keys 过拟合一下也无妨。</p><h2 id="混合索引"><a href="#混合索引" class="headerlink" title="混合索引"></a>混合索引</h2><p>然而将数据根据大小分成几堆供不同的NN模型进行训练仍然有可能造成erro_rate过高（也许是因为这一堆的数据毫无规律可循），那么这时候就可以用到传统的预测方法了。</p><p>上图中的三层网络结构还带来一个额外的优势：每个 Model 其实是独立的，我们可以用除了 NN 以外的预测方法代替之，包括线性回归等简单算法，甚至是 B 树。</p><p>事实上，最后选用了两种 Model：</p><ul><li>简单的DNN（0～2 层全连接的 hidden layer，ReLU 激发函数，每层最多 32 个神经元）</li><li>当叶节点的 NN 模型 error rate 超过阈值时，替换成 B 树</li></ul><p>训练算法如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://5b0988e595225.cdn.sohucs.com/images/20181105/71f5f08870a842fd8d48f47c267cf758.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>1.固定整个 RM-Index 的结构，比如层数、每层 Model 数量等（可以用网格法调参）；</p><p>2.用全部数据训练根节点，然后用根节点分类后的数据训练第二层模型，再用第二层分类后的数据训练第三层；</p><p>3.对于第三层（叶节点），如果 max_error 大于预设的阈值，就换成 B 树。</p><p>测试结果</p><p>为了对比 RM-Index 和 B 树的性能，论文作者找了 4 个数据集，分别用 RM-Index 和 B 树作二级索引。</p><ul><li>Weblogs 数据集：访问时间 timestamp -&gt; log entry （约 200M）</li><li>Maps 数据集：纬度 longitude -&gt; locations （约 200M）</li><li>Web-documents 数据集：documents（字符串）-&gt; document-id（约 10M）</li><li>Lognormal 数据集：按对数正态分布随机生成的数据</li></ul><p>测试中用了不同参数的 Learned Index 和 B 树，B 树也用了一个高度优化的实现。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://5b0988e595225.cdn.sohucs.com/images/20181105/e174ebf808404dd59550d5d92b0fee14.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Learned index适用于规律性强的数据，作这种数据的二级索引再合适不过了。内在规律越强，就意味着 B 树、哈希这些通用算法浪费的越多，这也是ML算法能捡到便宜的地方。</p><p>然而缺点也是明显的：增删改代价难以控制，由于神经网络训练的时间以及空间的复杂性，这足以磨平它查找的优势，毕竟大部分的数据库都是要进行频繁的增删改操作的。</p><p>但是，不得不肯定的是，作为应用范围最广的B树的地位是难以撼动的，但是在特定场景下（例如只读数据库），learned-index将会是一个现有方法的补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;论文链接：&lt;a href=&quot;https://www.researchgate.net/publication/321512926_The_Case_for_Learned_Index_Structures&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ht
      
    
    </summary>
    
    
    
      <category term="Learned index" scheme="http://infinitymiao.cn/tags/Learned-index/"/>
    
      <category term="机器学习" scheme="http://infinitymiao.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://infinitymiao.cn/2019/10/20/%E4%B8%80%E4%BA%9BJavaScript%E7%9A%84%E5%9D%91/"/>
    <id>http://infinitymiao.cn/2019/10/20/一些JavaScript的坑/</id>
    <published>2019-10-20T14:47:33.410Z</published>
    <updated>2019-10-20T15:02:11.619Z</updated>
    
    <content type="html"><![CDATA[<p>不得不说js是一种有点奇葩的语言，有很多的地方和其他语言不同，在写js的时候如果理所当然的用其他语言的方法去写会有很多的问题。</p><p>因此在这里将会有一些JavaScript与其他语言的“与众不同”的地方，避免以后再踩。</p><h2 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h2><p>JavaScript数组默认的排序方式很奇葩，它默认的排序方式array.sort()类似于python中由字符串构成的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">22</span>];</span><br><span class="line">array.sort()</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br><span class="line"></span><br><span class="line">控制台输出：</span><br><span class="line">[ <span class="number">1</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span> ]</span><br></pre></td></tr></table></figure><p>而如果要对js的数组进行正常的排序，需要自己写判断大小的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">22</span>];</span><br><span class="line">array.sort(<span class="function"><span class="keyword">function</span> (<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (m &lt; n) </span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (m &gt; n) </span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br><span class="line"></span><br><span class="line">控制台输出：</span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">23</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不得不说js是一种有点奇葩的语言，有很多的地方和其他语言不同，在写js的时候如果理所当然的用其他语言的方法去写会有很多的问题。&lt;/p&gt;
&lt;p&gt;因此在这里将会有一些JavaScript与其他语言的“与众不同”的地方，避免以后再踩。&lt;/p&gt;
&lt;h2 id=&quot;数组的排序&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://infinitymiao.cn/tags/JavaScript/"/>
    
      <category term="Nodejs" scheme="http://infinitymiao.cn/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://infinitymiao.cn/2019/10/18/JavaScript%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
    <id>http://infinitymiao.cn/2019/10/18/JavaScript的遍历方式/</id>
    <published>2019-10-18T15:33:12.767Z</published>
    <updated>2019-10-19T04:09:37.749Z</updated>
    
    <content type="html"><![CDATA[<p>之前在写用nodejs构建的网站后端时，理所当然的用到了遍历，js的遍历方式有很多种，先记下用到了的遍历方式以及其中遇到的坑。</p><h2 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1.for循环"></a>1.for循环</h2><p>for循环的用法基本与c/c++类似，除了获得数组长度的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(array[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到目前为止，在使用for循环的代码中没有出现任何bug，因此推荐以后使用最传统的for循环。而其他的几中遍历方式多多少少都会出现问题，估计是nodejs的任务处理逻辑使得对数组对象进行遍历时出现了指针错误？不太清楚，待以后研究。</p><h2 id="2-for-in"><a href="#2-for-in" class="headerlink" title="2.for in"></a>2.for in</h2><p> for in循环不仅可以遍历数组，还可以遍历对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">in</span> array)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为之前python写的比较多，所以本来对for in还是很有好感的，因此最开始就是用的for in对数组进行的遍历。但是当我在使用for in遍历一个长度为500的二维数组时，在数组的最后一个位置并没有得到正确的变量，而是一个undefined，即array[499] = undefined，这个bug让我找了很久，也是我遇到的第一个不是我自己造成的坑(＃｀д´)ﾉ，然而令我没想到的是js的遍历还有更多的坑。</p><h2 id="3-for-of"><a href="#3-for-of" class="headerlink" title="3.for of"></a>3.for of</h2><p>ES6中引入了 for … of 循环，以替代 for…in 和 forEach() ，允许对 Array(数组)、String(字符串)、Maps(映射)、Sets(集合)等可迭代的数据结构进行遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> array)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for of是我在发现for in的bug之后用来代替的方法，但是我在使用其遍历一个字典的values时出现了问题，当时的代码类似于下面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>&#125;,&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">3</span>&#125;,&#123;<span class="number">1</span>:<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>&#125;];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> dict <span class="keyword">of</span> <span class="built_in">Object</span>.values(array))&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">dict</span>))</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(dict[<span class="number">1</span>],,dict[<span class="number">2</span>]);</span><br><span class="line">    &#125;(dict)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出结果如下</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">undefined <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>又是undefined，真是令人无语，很迷，完全找不到理由，所以我将其改成了for循环。待以后找到原因再说吧，现在对js这种动态语言的好感越来越低了，以后要是再简单的后端的话，我还是用flask吧，js真是一言难尽啊，难怪没什么人用它做后端框架，而是用在前端上。</p><h2 id="4-for-each"><a href="#4-for-each" class="headerlink" title="4.for each"></a>4.for each</h2><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>目前来说forEach()还没有发现什么别的坑，但是不多不说回调这个东西挺那个的，写的时候还要考虑是不是其他部分的代码对遍历结果是不是立即需要，反正记住回调里的代码会迟于外面的代码运行就行了。</p><p>目前为止，js我只用到过上述的几种遍历方式，感觉js真的有很多的坑，等以后遇到js的其他坑，我再继续记录吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前在写用nodejs构建的网站后端时，理所当然的用到了遍历，js的遍历方式有很多种，先记下用到了的遍历方式以及其中遇到的坑。&lt;/p&gt;
&lt;h2 id=&quot;1-for循环&quot;&gt;&lt;a href=&quot;#1-for循环&quot; class=&quot;headerlink&quot; title=&quot;1.for循环
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://infinitymiao.cn/tags/JavaScript/"/>
    
      <category term="nodejs" scheme="http://infinitymiao.cn/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://infinitymiao.cn/2019/10/18/hello-world/"/>
    <id>http://infinitymiao.cn/2019/10/18/hello-world/</id>
    <published>2019-10-17T16:28:36.770Z</published>
    <updated>2019-10-28T03:56:51.822Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用 Node.js 打造多用户实时监控系统</title>
    <link href="http://infinitymiao.cn/2018/10/21/%E4%BD%BF%E7%94%A8%20Node.js%20%E6%89%93%E9%80%A0%E5%A4%9A%E7%94%A8%E6%88%B7%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>http://infinitymiao.cn/2018/10/21/使用 Node.js 打造多用户实时监控系统/</id>
    <published>2018-10-21T09:15:38.000Z</published>
    <updated>2019-10-18T15:08:50.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景概述"><a href="#背景概述" class="headerlink" title="背景概述"></a>背景概述</h3><p>首先描述一下笔者遇到的问题，我们可以设定这样一个场景：现在有一个实时监控系统的开发需求，要求同时支持多个用户（这里我们为了简化，暂时不涉及登陆态，假定一个设备即为一个用户），对于不同的用户来讲，他们需要监控的一部分内容是完全相同的，比如设备的 CPU 信息、内存信息等，而另外一部分内容是部分用户重叠的，比如对某一区域的用户来说某些监控信息是相同的，而还有一些信息，则是用户之间完全不同的。</p><p>对于每个用户来讲，当其进入页面之后即表明其开始监控，需要持续地进行数据更新，而当其退出界面或者手动点击停止监控，则停止监控。</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>实际上，对于以上情况，我们很容易想到通过 WebSocket，对不同的用户进行隔离处理，当一个用户开始监控的时候，通过函数来逐个启动其所有的监控项目，当其停止监控的时候，取消相关监控，并且清除无关变量等。我们可以将所有内容写到 WebSocket 的连接回调中，由于作用域隔离，不同用户之间的监控（读操作）不会产生互相影响。</p><p>这种方式可以说是最为快捷方便的方式了，并且几乎无需进行设计，但是这样有一个非常明显的效率问题：</p><p>由于不同用户的部分监控项目是有重叠的，对于这些重叠的项目，我们如果对于每一个用户都单独监控，那么就会产生非常多的浪费，如果这些监控中还涉及到数据库交互或者较为复杂的计算，那么成倍之后的性能损失是非常难以承受的。</p><p>所以，我们需要将不同用户重叠的那些监控项目，进行合并，合并成一个之后，如果有新的消息，我们就推到所有相关用户的回调函数中去处理。</p><p>也就是说，我们需要管理一个一对多的订阅发布模式。</p><p>到这里，我们发现我们想要实现这样一个监控系统，并不是非常简单，主要有下列问题：</p><ul><li>[1]对于可能有用户重叠的监控项目，我们需要抽离到用户作用域之外，并且通过统计计数等方式来”记住”当前所有的监控用户，当有新内容时推到各个用户的处理函数中，并且当最后一个用户取消监控的时候要及时清理相关对象。</li><li>[2]不同用户的重叠监控项目的监控方式也各不相同，有的是通过 <code>setInterval</code> 等方式的定时任务，有的是事件监听器等等。</li><li>[3]判断不同用户的项目是否重叠也有一定的争议，比如假设不同用户端监控的是同一个项目，调用的也是相同的函数，但是由于用户 ID 不同，这个时候我们如何判断是否算”同一个监控”？</li></ul><p>以上的这些问题，如果我们不借助现有的库和工具，自己顺着思路一点点去写，则很容易陷入修修补补的循环，无法专注监控本身，并且最后甚至在效率上适得其反。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>以下解决方案基于 Rx.js，需要对 <a href="https://cn.rx.js.org/class/es6/Observable.js~Observable.html" target="_blank" rel="noopener">Observable</a> 有一定了解。</p><h4 id="多个用户的监控以及取消"><a href="#多个用户的监控以及取消" class="headerlink" title="多个用户的监控以及取消"></a>多个用户的监控以及取消</h4><p><a href="https://github.com/aircloud/monitor-rx" target="_blank" rel="noopener">Monitor-RX</a> 是对以上场景问题的一个解决方案封装，其利用了 Rx.js 对订阅发布的管理能力，可以让整个流程变的清晰。</p><p>在 Rx.js 中，我们可以通过以下方式建立一个多播对象 <code>multicasted</code>：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.from([1, 2, 3]);</span><br><span class="line">var subject =<span class="built_in"> new </span>Rx.Subject();</span><br><span class="line">var multicasted = source.pipe(multicast(subject)).refCount();</span><br><span class="line">// 其属于<span class="built_in"> monitor-rx </span>的实现细节，无需理解亦可使用 monitor-rx</span><br><span class="line"></span><br><span class="line">subscription1 = refCounted.subscribe(&#123;</span><br><span class="line">    next: (v) =&gt; console.log('observerA: ' + JSON.stringify(v))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    subscription2 = refCounted.subscribe(&#123;</span><br><span class="line">        next: (v) =&gt; console.log('observerB: ' + JSON.stringify(v))</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, 1200);</span><br><span class="line"></span><br><span class="line">subscription1.unsubscribe();</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    subscription2.unsubscribe();</span><br><span class="line">    // 这里 refCounted 的 unsubscribe 相关清理逻辑会自动被调用</span><br><span class="line">&#125;, 3200);</span><br></pre></td></tr></table></figure><p>在这里采用多播，有如下几个好处：</p><ul><li>可以随时增加新的订阅者，并且新的订阅者只会收到其加入订阅之后的数据。</li><li>可以随时对任意一个订阅者取消订阅。</li><li>当所有订阅者取消订阅之后，Observable 会自动触发 Observable 函数，从而可以对其事件循环等进行清理。</li></ul><p>以上能力其实可以帮助我们解决上文提到的问题 [1]。</p><h4 id="监控格式的统一"><a href="#监控格式的统一" class="headerlink" title="监控格式的统一"></a>监控格式的统一</h4><p>实际上，在我们的监控系统中，从数据依赖的角度，我们的监控函数会有这样几类：</p><ul><li>[a]纯粹的定时任务，无数据依赖，这方面比如当前内存快照数据等。</li><li>[b]带有记忆依赖的定时任务：定时任务依赖前一次的数据（甚至更多次），需要两次数据做差等，这方面的数据比如一段时间的消耗数据，cpu 使用率的计算。</li><li>[c]带有用户依赖的定时任务：依赖用户 id 等信息，不同用户无法共用。</li></ul><p>而从任务触发的角度，我们仍待可以对其分类：</p><ul><li>[i]简单的 <code>setInterval</code> 定时任务。</li><li>[ii]基于事件机制的不定时任务。</li><li>[iii]基于其他触发机制的任务。</li></ul><p>实际上，我们如果采用 Rx.js 的模式进行编写，无需考虑任务的数据依赖和触发的方式，只需写成一个一个 Observable 实例即可。另外，对于比较简单的 [a]&amp;[i] 或 [c]&amp;[i]  类型，我们还可以通过 monitor-rx 提供的 <code>convertToRx</code> 或 <code>convertToSimpleRx</code> 转换成 Observable 实例生成函数，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">var</span> process = <span class="built_in">require</span>(<span class="string">'process'</span>);</span><br><span class="line"><span class="keyword">const</span> monitorRx = <span class="built_in">require</span>(<span class="string">'monitor-rx'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMemoryInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> process.memoryUsage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> memory = monitorRx.Utils.convertToSimpleRx(getMemoryInfo)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">//const memory = monitorRx.Utils.convertToRx(&#123;</span></span><br><span class="line"><span class="comment">//    getMemoryInfo</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = memory;</span><br></pre></td></tr></table></figure><p>convertToRx 相比于 convertToSimpleRx，可以支持函数配置注入（即下文中 opts 的 func 属性和 args 属性）,可以在具体生成 Observable 实例的时候具体指定使用哪些函数以及其参数。</p><p>如果是比较复杂的 Observable 类型，那么我们就无法直接通过普通函数进行转化了，这个时候我们遵循 Observable 的标准返回 Observable 生成函数即可（不是直接返回 Observable 实例） </p><p>这实际上也对问题 [2] 进行了解决。</p><h4 id="监控唯一性："><a href="#监控唯一性：" class="headerlink" title="监控唯一性："></a>监控唯一性：</h4><p>我们知道，如果两个用户都监控同一个信息，我们可以共用一个 Observable，这里的问题，就是如何定义两个用户的监控是”相同”的。</p><p>这里我们采用一个可选项 opts 的概念，其一共有如下属性：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">module</span>: <span class="string">'ModuleName'</span>,</span><br><span class="line">    <span class="attribute">func</span>: [<span class="string">'FuncName'</span>],</span><br><span class="line">    <span class="attribute">args</span>: [[<span class="string">'arg1'</span>,<span class="string">'arg2'</span>]],</span><br><span class="line">    <span class="attribute">opts</span>: &#123;<span class="attribute">interval</span>:<span class="number">1000</span>&#125;, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>module 即用户是对哪一个模块进行监控（实际上是 Observable），func 和 args 则是监控过程中需要调用的函数，我们也可以通过 agrs 传入用户个人信息。于没有内部子函数调用的监控，二者为空即可，opts 是一些其他可选项，比如定义请求间隔等。</p><p>之后，我们通过 <code>JSON.stringify(opts)</code> 来序列化这个可选项配置，如果两个用户序列化后的可选项配置相同，那么我们就认为这两个用户可以共用一个监控，即共用一个 Observable。</p><h3 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h3><p>实际上，借助 Monitor-RX，我们可以很方便的解决上述提出的问题，Monitor-RX 也在积极的更新中，大家可以在<a href="https://github.com/aircloud/monitor-rx" target="_blank" rel="noopener">这里</a>了解到更多的信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景概述&quot;&gt;&lt;a href=&quot;#背景概述&quot; class=&quot;headerlink&quot; title=&quot;背景概述&quot;&gt;&lt;/a&gt;背景概述&lt;/h3&gt;&lt;p&gt;首先描述一下笔者遇到的问题，我们可以设定这样一个场景：现在有一个实时监控系统的开发需求，要求同时支持多个用户（这里我们为了简
      
    
    </summary>
    
    
    
      <category term="Node.js" scheme="http://infinitymiao.cn/tags/Node-js/"/>
    
      <category term="javascript" scheme="http://infinitymiao.cn/tags/javascript/"/>
    
      <category term="Rx.js" scheme="http://infinitymiao.cn/tags/Rx-js/"/>
    
  </entry>
  
</feed>
