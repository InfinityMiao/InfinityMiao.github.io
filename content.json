{"meta":{"title":"InfinityMiao's Blog","subtitle":null,"description":"InfinityMiao的博客","author":"InfinityMiao","url":"http://infinitymiao.cn","root":"/"},"pages":[{"title":"","date":"2019-10-18T15:08:50.923Z","updated":"2019-10-18T15:08:50.923Z","comments":true,"path":"404.html","permalink":"http://infinitymiao.cn/404.html","excerpt":"","text":""},{"title":"About","date":"2016-04-20T20:48:33.000Z","updated":"2019-07-05T17:04:14.000Z","comments":true,"path":"about/index.html","permalink":"http://infinitymiao.cn/about/index.html","excerpt":"","text":"大多数时候，都在思考自己该走向何方 Mail: onlythen@yeah.net 9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 “您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。 —— 李书航 － 什么是「共产中文腔调」？"},{"title":"","date":"2019-10-28T11:06:53.095Z","updated":"2019-10-28T11:06:53.095Z","comments":false,"path":"archive/index.html","permalink":"http://infinitymiao.cn/archive/index.html","excerpt":"","text":""},{"title":"","date":"2019-10-28T10:43:03.057Z","updated":"2019-10-28T10:43:03.057Z","comments":false,"path":"tags/index.html","permalink":"http://infinitymiao.cn/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-10-28T10:43:14.268Z","updated":"2019-10-28T10:43:14.268Z","comments":false,"path":"categories/index.html","permalink":"http://infinitymiao.cn/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-10-28T10:33:30.000Z","updated":"2019-10-28T10:33:30.250Z","comments":true,"path":"tags/index-1.html","permalink":"http://infinitymiao.cn/tags/index-1.html","excerpt":"","text":""}],"posts":[{"title":"learned index学习笔记","slug":"learned index学习笔记","date":"2019-10-22T02:02:21.678Z","updated":"2019-11-11T16:01:50.330Z","comments":true,"path":"2019/10/22/learned index学习笔记/","link":"","permalink":"http://infinitymiao.cn/2019/10/22/learned index学习笔记/","excerpt":"","text":"论文链接：https://www.researchgate.net/publication/321512926_The_Case_for_Learned_Index_Structures 前言数据库的索引和机器学习里的预测模型其实有一些相似之处，比如 B 树是把 key 映射到一个有序数组中的某个位置，Hash 索引是把 key 映射到一个无序数组中的某个位置，bitmap 是把 key 映射成是一个布尔值（存在与否）。 所以这就是本文要讨论的地方了，以上的想法是可以实现的。实验表明，在某些数据集上（有规律可循的数据集），用 RM-Index 预测模型代替 B 树之类的数据结构，可以提升 70% 的速度、并节约相当可观的空间。 例如将 index 视作模型的时候，key 作为输入，对应 key 的记录的 position 作为预测结果。 Range Index 模型抽象为 CDF对于区间查询而言，数据必须是有序的，这样才能有效的查到对应的记录。这样的话我们就观察到一个非常有趣的现象，预测给定有序的数组内 key 的 position 近似累计分布函数（CDF），我们可以建模数据的 CDF 来预测数据的 position。 作者尝试使用 200 M 的 web 服务日志记录中的时间戳作为数据集来训练模型，2层宽度为32的全连接的神经网络使用 ReLU 作为激活函数，时间戳作为输入，position 作为 label，使用 TensorFlow 和 Python 进行模型训练，大约需要花费 80000 纳秒进行模型的训练，查询几乎不花费时间，作为对比，B 树查找同样的数据大约只需要 300 纳秒，相差两个数量级，整个 key 空间查找大约快2-3倍，可能是由以下原因导致的。 TensorFlow 更适用于大的模型，尤其是使用 Python 作为前端 最后一公里的精度问题，虽然整体数据分布看上去接近于 CDF，很平滑，但是放大某个点的数据分布的时候，我们会发现数据分布很不规则，所以如何解决最后一公里的精度问题就十分重要 经典的机器学习问题，最终的目标是想要减小平均误差，但是我们查找索引，是希望获得最佳预测，最终是期望找到 key 的真实的 position B+ 树十分高效，因为顶层的节点也就是索引都在缓存中，但是其他模型无法利用缓存的高效性，比如如果我们使用神经网络，那么需要使用所有的权重来预测最终的结果，权重如果在内存中的话开销就会比较大 范围索引为了解决 ML 模型替代 B+ 树的最后一公里精度问题，paper 中提出了 LIF （Learning Index Framework）和递归模型索引（RM-Index），主要使用简单的全连接神经网络。 The Learning Index FrameworkLIF 可以看做一个索引综合系统，给定一个索引规范，LIF 可以生成不同的索引配置，优化并且自动测试，可以即时的学习简单的模型，也可以依赖 TensorFlow 获取复杂的模型，但是不使用 TensorFlow 进行预测，并且当给定一个使用 TensorFlow 训练好的模型 LIF 可以自动提取权重，并根据规范生成高效的索引结构。使用 XLA 的 TensorFlow 可以支持代码编译，但是主要用于大型模型，相比之下 LIF 专注于小型模型。 这一部分内容主要用于解决当数据分布改变时需要重新训练模型的时间开销。 The Recursive Model Index实验已经发现，直接上 DNN 效果并不好：单次计算代价太大，只能用 GPU（而调用 GPU 会产生不小的 间接费用）；而且网络很庞大，retrain（增删改）代价很大。为解决这个问题，决策树给我们做了个很好的提示，如果一个模型解决不了问题，就再加几层。 举个例子：为 100M 记录训练一个足够精确的预测器太难，那就分成 3 层树状结构。根节点分类器把记录分出 100 份，每份大约有 1M 记录；第二层再分出 100 份，每份大约只剩 10K 记录；第三层再分出 100 份，每份大约有 100 条记录——假设 100 条纪录足够把误差在 min/max_err 之内。 RM-Index结构示意： img 这种模型结构的好处是： 很容易学习整体数据分布 将整个空间分割为更小的子区间，每个子区间都类似于一个 B 树或者决策树，更容易去解决最后一公里的精度问题 不同的层之间不需要搜索，比如 model 1.1 输出的 y 是一个偏移量，可以直接用于挑选下一层的模型 每个 NN 模型就像一个精通自己领域的专家，他只要学习某个很小子集的 keys 就可以了。这也同时解决了 last mile 难题，大不了为这一百左右个 keys 过拟合一下也无妨。 混合索引递归模型索引（RM-Index）的另一个优点是能够使用混合模型，比如顶层，可能使用 ReLU 的神经网络是最好的，因为可以学习大范围的复杂数据分布，但是下层模型可能使用简单的线性回归模型就可以了，因为时间和空间的开销都相对更小一些，同时，如果数据分布很难学习，我们甚至可以设置阈值，在最终阶段使用传统 B 树。 事实上，最后选用了两种 Model： 简单的DNN（0～2 层全连接的 hidden layer，ReLU 激发函数，每层最多 32 个神经元） 当叶节点的 NN 模型 error rate 超过阈值时，替换成 B 树 训练算法如下： img 4-10行实现了基于顶点模型进行训练，并将范围内的 key 存入；11-14行，根据阈值决定是否使用 B 树代替模型。 1.固定整个 RM-Index 的结构，比如层数、每层 Model 数量等（可以用网格法调参）； 2.用全部数据训练根节点，然后用根节点分类后的数据训练第二层模型，再用第二层分类后的数据训练第三层； 3.对于第三层（叶节点），如果 max_error 大于预设的阈值，就换成 B 树。 搜索策略paper 中提出了三种搜索策略： Model Biased Search：默认搜索策略，类似传统二分搜索，不同点在于初始的中间点被设置为模型预测的结果 Biased Quaternary Search：同时查找三个点，pos-σ，pos，pos+σ，需要 CPU 可以从主存中并行获取多个数据地址，然后进行四元搜索 测试结果为了对比 RM-Index 和 B 树的性能，论文作者找了 4 个数据集，分别用 RM-Index 和 B 树作二级索引。 Weblogs 数据集：访问时间 timestamp -&gt; log entry （约 200M） Maps 数据集：纬度 longitude -&gt; locations （约 200M） Web-documents 数据集：documents（字符串）-&gt; document-id（约 10M） Lognormal 数据集：按对数正态分布随机生成的数据 测试中用了不同参数的 Learned Index 和 B 树，B 树也用了一个高度优化的实现。 img 插入学习索引的主要缺点是它的静态性质。其数据结构不支持任何修改，包括插入、更新或删除。给定一个要插入的键k，我们首先使用该模型找到k的插入位置。然后，我们创建一个新数组，其长度为1加上旧数组的长度。接下来，我们将数据从旧数组复制到新数组，其中k的插入位置右侧的元素向右移动一个位置。我们在新数组的插入位置插入k。最后，我们更新模型以反映数据分布的变化。 这种策略对于数据大小具有线性时间复杂性。此外，随着数据的插入，RMI模型随着时间的推移变得不那么精确，这需要对模型进行再培训，进一步增加了插入的成本。显然，这种天真的插入策略在实践中是不可接受的。 Point Index point index（hash索引）的优化基础在于，典型的数据冲突可能会有33%（如生日）。然而实际减少冲突和运行效果取决于两个主要方面： 数据本身的分布情况。比如均匀分布场景下，learned index不会比普通的随机hash函数好多少； 其他payload等 通过散列映射的目标大小M来扩展CDF，并使用h(K) = F (K) \\M*，K是散列函数的键。 如果模型F完美地学习了键的经验CDF，那么就不会存在冲突。此外，散列函数与实际的散列映射体系结构是正交的，可以与单独的链接或任何其他散列映射类型相结合。对于该模型，仍然可以再次利用递归模型体系结构。 从文章的数据集来说，还是有效果的： img EXISTENCE INDEXBloom filters作为分类问题 img 我们需要训练这样一个神经网络，使得 log 损失函数最小。为了满足假阴性为0这个条件，我们创建一个溢出的布隆过滤器，根据阈值学习一个模型，当输出结果大于等于阈值的时候，我们认为这个 key 是存在于 set 中的，当小于阈值时，则去 check 溢出的布隆过滤器。 简单的说，就是将存在的 key 和不存在的 key 划分为两个数据集，然后融合到一个集合中进行训练，最小化一个 log 损失函数。 带Hash模型的Bloom filter将布隆过滤器视作一个分类问题时与布隆过滤器中的散列函数本身是矛盾的，因为没有区间具有非零的 FNR，我们可以使用 f(x) 映射到 m 的位数组上，f(x) 映射范围是[0,1]，所以我们可以假设 d 如下，作用是离散化空间。 所以我们可以使用 d(f(x)) 作为散列函数，这样可以将存在的 key 映射到 bit 的高位上，将不存在的 key 映射到 bit 的低位上。 f(x) ∈ [0,1]，当 key 不存在时，f(x)更接近于0，反之，更接近于1，所以 key 大多分布在高位上，non-key 大多分布在低位上。 总结Learned index适用于规律性强的数据，作这种数据的二级索引再合适不过了。内在规律越强，就意味着 B 树、哈希这些通用算法浪费的越多，这也是ML算法能捡到便宜的地方。 然而缺点也是明显的：增删改代价难以控制，由于神经网络训练的时间以及空间的复杂性，这足以磨平它查找的优势，毕竟大部分的数据库都是要进行频繁的增删改操作的。 但是，不得不肯定的是，作为应用范围最广的B树的地位是难以撼动的，但是在特定场景下（例如只读数据库），learned-index将会是一个现有方法的补充。","categories":[],"tags":[{"name":"Learned index","slug":"Learned-index","permalink":"http://infinitymiao.cn/tags/Learned-index/"},{"name":"机器学习","slug":"机器学习","permalink":"http://infinitymiao.cn/tags/机器学习/"}]},{"title":"一些JavaScript的坑","slug":"一些JavaScript的坑","date":"2019-10-20T14:47:33.410Z","updated":"2019-10-28T11:08:51.577Z","comments":true,"path":"2019/10/20/一些JavaScript的坑/","link":"","permalink":"http://infinitymiao.cn/2019/10/20/一些JavaScript的坑/","excerpt":"","text":"不得不说js是一种有点奇葩的语言，有很多的地方和其他语言不同，在写js的时候如果理所当然的用其他语言的方法去写会有很多的问题。 因此在这里将会有一些JavaScript与其他语言的“与众不同”的地方，避免以后再踩。 数组的排序JavaScript数组默认的排序方式很奇葩，它默认的排序方式array.sort()类似于python中由字符串构成的数组。 123456let array = [1,2,13,23,5,7,8,10,11,13,14,16,17,19,20,22];array.sort()console.log(array)控制台输出：[ 1, 10, 11, 13, 13, 14, 16, 17, 19, 2, 20, 22, 23, 5, 7, 8 ] 而如果要对js的数组进行正常的排序，需要自己写判断大小的函数 12345678910111213let array = [1,2,13,23,5,7,8,10,11,13,14,16,17,19,20,22];array.sort(function (m, n) &#123; if (m &lt; n) return -1 else if (m &gt; n) return 1 else return 0 &#125;);console.log(array)控制台输出：[ 1, 2, 5, 7, 8, 10, 11, 13, 13, 14, 16, 17, 19, 20, 22, 23]","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://infinitymiao.cn/tags/JavaScript/"},{"name":"Nodejs","slug":"Nodejs","permalink":"http://infinitymiao.cn/tags/Nodejs/"}]},{"title":"JavaScript的遍历方式","slug":"JavaScript的遍历方式","date":"2019-10-18T15:33:12.767Z","updated":"2019-10-28T11:08:13.777Z","comments":true,"path":"2019/10/18/JavaScript的遍历方式/","link":"","permalink":"http://infinitymiao.cn/2019/10/18/JavaScript的遍历方式/","excerpt":"","text":"之前在写用nodejs构建的网站后端时，理所当然的用到了遍历，js的遍历方式有很多种，先记下用到了的遍历方式以及其中遇到的坑。 1.for循环for循环的用法基本与c/c++类似，除了获得数组长度的方式 1234var array = [1,2,3,4,5,6,7,8,9];for(let i = 0;i&lt;array.length;i++)&#123; console.log(array[i]);&#125; 到目前为止，在使用for循环的代码中没有出现任何bug，因此推荐以后使用最传统的for循环。而其他的几中遍历方式多多少少都会出现问题，估计是nodejs的任务处理逻辑使得对数组对象进行遍历时出现了指针错误？不太清楚，待以后研究。 2.for in for in循环不仅可以遍历数组，还可以遍历对象 1234var array = [1,2,3,4,5,6,7,8,9];for(let num in array)&#123; console.log(num);&#125; 因为之前python写的比较多，所以本来对for in还是很有好感的，因此最开始就是用的for in对数组进行的遍历。但是当我在使用for in遍历一个长度为500的二维数组时，在数组的最后一个位置并没有得到正确的变量，而是一个undefined，即array[499] = undefined，这个bug让我找了很久，也是我遇到的第一个不是我自己造成的坑(＃｀д´)ﾉ，然而令我没想到的是js的遍历还有更多的坑。 3.for ofES6中引入了 for … of 循环，以替代 for…in 和 forEach() ，允许对 Array(数组)、String(字符串)、Maps(映射)、Sets(集合)等可迭代的数据结构进行遍历。 1234var array = [1,2,3,4,5,6,7,8,9];for(let num of array)&#123; console.log(num);&#125; for of是我在发现for in的bug之后用来代替的方法，但是我在使用其遍历一个字典的values时出现了问题，当时的代码类似于下面。 123456var array = [&#123;1:1,2:2&#125;,&#123;1:2,2:3&#125;,&#123;1:3,2:4&#125;];for(let dict of Object.values(array))&#123; (function(dict))&#123; console.log(dict[1],,dict[2]); &#125;(dict)&#125; 结果输出结果如下 123undefined 22 33 4 又是undefined，真是令人无语，很迷，完全找不到理由，所以我将其改成了for循环。待以后找到原因再说吧，现在对js这种动态语言的好感越来越低了，以后要是再简单的后端的话，我还是用flask吧，js真是一言难尽啊，难怪没什么人用它做后端框架，而是用在前端上。 4.for eachforEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。1234var array = [1,2,3,4,5,6,7,8,9];array.forEach(function(num)&#123; console.log(num);&#125;); 目前来说forEach()还没有发现什么别的坑，但是不多不说回调这个东西挺那个的，写的时候还要考虑是不是其他部分的代码对遍历结果是不是立即需要，反正记住回调里的代码会迟于外面的代码运行就行了。 目前为止，js我只用到过上述的几种遍历方式，感觉js真的有很多的坑，等以后遇到js的其他坑，我再继续记录吧。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://infinitymiao.cn/tags/JavaScript/"},{"name":"nodejs","slug":"nodejs","permalink":"http://infinitymiao.cn/tags/nodejs/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-17T16:28:36.770Z","updated":"2019-10-28T03:56:51.822Z","comments":true,"path":"2019/10/18/hello-world/","link":"","permalink":"http://infinitymiao.cn/2019/10/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"使用 Node.js 打造多用户实时监控系统","slug":"使用 Node.js 打造多用户实时监控系统","date":"2018-10-21T09:15:38.000Z","updated":"2019-10-18T15:08:50.936Z","comments":true,"path":"2018/10/21/使用 Node.js 打造多用户实时监控系统/","link":"","permalink":"http://infinitymiao.cn/2018/10/21/使用 Node.js 打造多用户实时监控系统/","excerpt":"","text":"背景概述首先描述一下笔者遇到的问题，我们可以设定这样一个场景：现在有一个实时监控系统的开发需求，要求同时支持多个用户（这里我们为了简化，暂时不涉及登陆态，假定一个设备即为一个用户），对于不同的用户来讲，他们需要监控的一部分内容是完全相同的，比如设备的 CPU 信息、内存信息等，而另外一部分内容是部分用户重叠的，比如对某一区域的用户来说某些监控信息是相同的，而还有一些信息，则是用户之间完全不同的。 对于每个用户来讲，当其进入页面之后即表明其开始监控，需要持续地进行数据更新，而当其退出界面或者手动点击停止监控，则停止监控。 问题描述实际上，对于以上情况，我们很容易想到通过 WebSocket，对不同的用户进行隔离处理，当一个用户开始监控的时候，通过函数来逐个启动其所有的监控项目，当其停止监控的时候，取消相关监控，并且清除无关变量等。我们可以将所有内容写到 WebSocket 的连接回调中，由于作用域隔离，不同用户之间的监控（读操作）不会产生互相影响。 这种方式可以说是最为快捷方便的方式了，并且几乎无需进行设计，但是这样有一个非常明显的效率问题： 由于不同用户的部分监控项目是有重叠的，对于这些重叠的项目，我们如果对于每一个用户都单独监控，那么就会产生非常多的浪费，如果这些监控中还涉及到数据库交互或者较为复杂的计算，那么成倍之后的性能损失是非常难以承受的。 所以，我们需要将不同用户重叠的那些监控项目，进行合并，合并成一个之后，如果有新的消息，我们就推到所有相关用户的回调函数中去处理。 也就是说，我们需要管理一个一对多的订阅发布模式。 到这里，我们发现我们想要实现这样一个监控系统，并不是非常简单，主要有下列问题： [1]对于可能有用户重叠的监控项目，我们需要抽离到用户作用域之外，并且通过统计计数等方式来”记住”当前所有的监控用户，当有新内容时推到各个用户的处理函数中，并且当最后一个用户取消监控的时候要及时清理相关对象。 [2]不同用户的重叠监控项目的监控方式也各不相同，有的是通过 setInterval 等方式的定时任务，有的是事件监听器等等。 [3]判断不同用户的项目是否重叠也有一定的争议，比如假设不同用户端监控的是同一个项目，调用的也是相同的函数，但是由于用户 ID 不同，这个时候我们如何判断是否算”同一个监控”？ 以上的这些问题，如果我们不借助现有的库和工具，自己顺着思路一点点去写，则很容易陷入修修补补的循环，无法专注监控本身，并且最后甚至在效率上适得其反。 解决方案以下解决方案基于 Rx.js，需要对 Observable 有一定了解。 多个用户的监控以及取消Monitor-RX 是对以上场景问题的一个解决方案封装，其利用了 Rx.js 对订阅发布的管理能力，可以让整个流程变的清晰。 在 Rx.js 中，我们可以通过以下方式建立一个多播对象 multicasted： 1234567891011121314151617181920var source = Rx.from([1, 2, 3]);var subject = new Rx.Subject();var multicasted = source.pipe(multicast(subject)).refCount();// 其属于 monitor-rx 的实现细节，无需理解亦可使用 monitor-rxsubscription1 = refCounted.subscribe(&#123; next: (v) =&gt; console.log('observerA: ' + JSON.stringify(v))&#125;);setTimeout(() =&gt; &#123; subscription2 = refCounted.subscribe(&#123; next: (v) =&gt; console.log('observerB: ' + JSON.stringify(v)) &#125;);&#125;, 1200);subscription1.unsubscribe();setTimeout(() =&gt; &#123; subscription2.unsubscribe(); // 这里 refCounted 的 unsubscribe 相关清理逻辑会自动被调用&#125;, 3200); 在这里采用多播，有如下几个好处： 可以随时增加新的订阅者，并且新的订阅者只会收到其加入订阅之后的数据。 可以随时对任意一个订阅者取消订阅。 当所有订阅者取消订阅之后，Observable 会自动触发 Observable 函数，从而可以对其事件循环等进行清理。 以上能力其实可以帮助我们解决上文提到的问题 [1]。 监控格式的统一实际上，在我们的监控系统中，从数据依赖的角度，我们的监控函数会有这样几类： [a]纯粹的定时任务，无数据依赖，这方面比如当前内存快照数据等。 [b]带有记忆依赖的定时任务：定时任务依赖前一次的数据（甚至更多次），需要两次数据做差等，这方面的数据比如一段时间的消耗数据，cpu 使用率的计算。 [c]带有用户依赖的定时任务：依赖用户 id 等信息，不同用户无法共用。 而从任务触发的角度，我们仍待可以对其分类： [i]简单的 setInterval 定时任务。 [ii]基于事件机制的不定时任务。 [iii]基于其他触发机制的任务。 实际上，我们如果采用 Rx.js 的模式进行编写，无需考虑任务的数据依赖和触发的方式，只需写成一个一个 Observable 实例即可。另外，对于比较简单的 [a]&amp;[i] 或 [c]&amp;[i] 类型，我们还可以通过 monitor-rx 提供的 convertToRx 或 convertToSimpleRx 转换成 Observable 实例生成函数，例如： 12345678910111213141516var os = require('os');var process = require('process');const monitorRx = require('monitor-rx');function getMemoryInfo() &#123; return process.memoryUsage();&#125;const memory = monitorRx.Utils.convertToSimpleRx(getMemoryInfo)// 或者//const memory = monitorRx.Utils.convertToRx(&#123;// getMemoryInfo//&#125;);module.exports = memory; convertToRx 相比于 convertToSimpleRx，可以支持函数配置注入（即下文中 opts 的 func 属性和 args 属性）,可以在具体生成 Observable 实例的时候具体指定使用哪些函数以及其参数。 如果是比较复杂的 Observable 类型，那么我们就无法直接通过普通函数进行转化了，这个时候我们遵循 Observable 的标准返回 Observable 生成函数即可（不是直接返回 Observable 实例） 这实际上也对问题 [2] 进行了解决。 监控唯一性：我们知道，如果两个用户都监控同一个信息，我们可以共用一个 Observable，这里的问题，就是如何定义两个用户的监控是”相同”的。 这里我们采用一个可选项 opts 的概念，其一共有如下属性： 123456&#123; module: 'ModuleName', func: ['FuncName'], args: [['arg1','arg2']], opts: &#123;interval:1000&#125;, &#125; module 即用户是对哪一个模块进行监控（实际上是 Observable），func 和 args 则是监控过程中需要调用的函数，我们也可以通过 agrs 传入用户个人信息。于没有内部子函数调用的监控，二者为空即可，opts 是一些其他可选项，比如定义请求间隔等。 之后，我们通过 JSON.stringify(opts) 来序列化这个可选项配置，如果两个用户序列化后的可选项配置相同，那么我们就认为这两个用户可以共用一个监控，即共用一个 Observable。 更多内容实际上，借助 Monitor-RX，我们可以很方便的解决上述提出的问题，Monitor-RX 也在积极的更新中，大家可以在这里了解到更多的信息。","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://infinitymiao.cn/tags/Node-js/"},{"name":"javascript","slug":"javascript","permalink":"http://infinitymiao.cn/tags/javascript/"},{"name":"Rx.js","slug":"Rx-js","permalink":"http://infinitymiao.cn/tags/Rx-js/"}]}]}